#!/bin/bash

# gcmp.sh - A powerful git comparison script using Beyond Compare.
# Compares any two git references, including the working directory,
# staging area, and stashes.

# 确保脚本在任何命令失败时立即退出
set -e
# 如果使用了未定义的变量，则脚本退出
set -u

# --- 全局配置 ---
# 你可以在这里修改为你喜欢的比较工具命令
DIFF_TOOL="bcompare"


# --- 帮助信息函数 ---
show_help() {
cat << EOF
Usage: $(basename "$0") [repo_path] <ref1> <ref2>

A powerful git comparison script that uses an external diff tool.
It can compare any two git "areas" or references.

The 'work' keyword is treated specially: it uses the live working
directory for comparison, allowing for on-the-fly edits.

The script is smart: if you provide a reference (like HEAD or a branch name)
that points to the same commit as a clean working directory, it will
automatically use the live directory instead of creating a temporary copy.

Arguments:
  repo_path     (Optional) Path to the git repository. If omitted, uses the current directory.
  <ref1>        The first reference to compare.
  <ref2>        The second reference to compare.

Special Keywords for <ref1> and <ref2>:
  work          The working directory (live, not a copy).
  stage         The staging area (the index).
  stash         The most recent stash (equivalent to 'stash@{0}').
  <commit-ish>  Any valid git reference like a commit hash (abc123d),
                branch name (main), tag (v1.0), or relative ref (HEAD~2).

Examples:
  # Compare working directory with the staging area
  $(basename "$0") work stage

  # Compare working directory with the current branch's head
  $(basename "$0") work HEAD

  # Compare staging area with a feature branch
  $(basename "$0") stage my-feature

  # Compare two commits
  $(basename "$0") abc123def 456efgh

  # Compare HEAD with its parent (when work dir is clean, HEAD is treated as 'work')
  $(basename "$0") HEAD HEAD~1
EOF
}


# --- 参数检查与解析 ---
if [ "$#" -lt 1 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_help
    exit 0
fi

if [ "$#" -lt 2 ]; then
    echo "Error: Invalid number of arguments." >&2
    echo "Run '$(basename "$0") --help' for usage details." >&2
    exit 1
fi

# 解析参数，支持可选的仓库路径
if [ -d "$1" ] && [ $# -eq 3 ]; then
    REPO_PATH=$(realpath "$1") # 使用 realpath 获取绝对路径
    REF1="$2"
    REF2="$3"
else
    # 检查当前目录是否为 git 仓库
    if ! git -C "." rev-parse --is-inside-work-tree &> /dev/null; then
        echo "Error: Not a git repository: $(pwd)" >&2
        echo "Please run from within a git repo or specify the path as the first argument." >&2
        exit 1
    fi
    REPO_PATH=$(realpath ".")
    REF1="$1"
    REF2="$2"
fi

# --- 环境检查 ---
if ! command -v "$DIFF_TOOL" &> /dev/null; then
    echo "Error: Diff tool '$DIFF_TOOL' not found." >&2
    echo "Please ensure it is installed and in your PATH, or change the DIFF_TOOL variable in the script." >&2
    exit 1
fi

# --- 核心逻辑 ---

# 创建一个唯一的父临时目录，用于存放本次比较中需要导出的内容
PARENT_TEMP_DIR=$(mktemp -d -t git-compare-XXXXXXXX)

# 定义清理函数
cleanup() {
    echo "Cleaning up temp directory: $PARENT_TEMP_DIR"
    rm -rf "$PARENT_TEMP_DIR"
}

# 无论脚本如何退出（正常、错误、Ctrl+C），都执行清理操作
trap cleanup EXIT

# 函数：判断一个引用是否等价于一个干净的工作区
is_ref_equivalent_to_clean_work_dir() {
    local repo_path="$1"
    local ref="$2"

    # 解析引用的 commit hash，如果失败则不等价
    local ref_hash
    ref_hash=$(git -C "$repo_path" rev-parse --verify "$ref^{commit}" 2>/dev/null) || return 1

    # 获取 HEAD 的 commit hash
    local head_hash
    head_hash=$(git -C "$repo_path" rev-parse HEAD)

    # 比较两个 hash 是否相同
    if [[ "$ref_hash" == "$head_hash" ]]; then
        return 0 # 相同，返回成功
    else
        return 1 # 不相同，返回失败
    fi
}

# 函数：根据引用类型，将文件内容填充到目标目录
populate_dir_from_ref() {
    local repo_path="$1"
    local ref="$2"
    local target_dir="$3"
    local ref_for_git="$ref"

    if [[ "$ref" == "stash" ]]; then
        ref_for_git="stash@{0}"
    fi

    echo "--> Populating snapshot of '$ref' into $(basename "$target_dir")"
    mkdir -p "$target_dir"

    case "$ref" in
        stage)
            echo "    (Exporting staging area/index...)"
            git -C "$repo_path" checkout-index -a -f --prefix="$target_dir/"
            ;;
        *)
            echo "    (Exporting from git ref: '$ref_for_git')"
            if ! git -C "$repo_path" rev-parse --verify --quiet "$ref_for_git^{tree}" >/dev/null; then
                echo "Error: Git reference '$ref' ('$ref_for_git') is not a valid tree-ish object." >&2
                exit 1
            fi
            git -C "$repo_path" archive "$ref_for_git" | tar -x -C "$target_dir"
            ;;
    esac
}

# 函数：获取引用的标签名
get_label() {
    local repo_path="$1"
    local ref="$2"

    case "$ref" in
        work|stage)
            echo "$ref"
            ;;
        *)
            local ref_for_git="$ref"
            if [[ "$ref" == "stash" ]]; then
                ref_for_git="stash@{0}"
            fi
            git -C "$repo_path" describe --always --all "$ref_for_git" 2>/dev/null | tr '/' '_'
            ;;
    esac
}

# --- 执行 ---

echo "================================================="
echo "Preparing comparison:"

# 预先检查工作区是否干净，避免重复调用
IS_WORKDIR_CLEAN=false
if [ -z "$(git -C "$REPO_PATH" status --porcelain)" ]; then
    IS_WORKDIR_CLEAN=true
fi

# --- 处理第一个比较对象 ---
USE_LIVE_DIR_1=false
if [[ "$REF1" == "work" ]]; then
    USE_LIVE_DIR_1=true
elif [[ "$REF1" != "stage" ]] && [[ "$IS_WORKDIR_CLEAN" == "true" ]] && is_ref_equivalent_to_clean_work_dir "$REPO_PATH" "$REF1"; then
    echo "  (Note: '$REF1' matches the clean working directory, using live path for performance)"
    USE_LIVE_DIR_1=true
fi

if [[ "$USE_LIVE_DIR_1" == "true" ]]; then
    COMPARE_PATH1="$REPO_PATH"
    echo "  1: $REF1 (using live directory: $COMPARE_PATH1)"
else
    LABEL1=$(get_label "$REPO_PATH" "$REF1")
    COMPARE_PATH1="${PARENT_TEMP_DIR}/${LABEL1}"
    echo "  1: $REF1 (creating snapshot...)"
    populate_dir_from_ref "$REPO_PATH" "$REF1" "$COMPARE_PATH1"
fi

# --- 处理第二个比较对象 ---
USE_LIVE_DIR_2=false
if [[ "$REF2" == "work" ]]; then
    USE_LIVE_DIR_2=true
elif [[ "$REF2" != "stage" ]] && [[ "$IS_WORKDIR_CLEAN" == "true" ]] && is_ref_equivalent_to_clean_work_dir "$REPO_PATH" "$REF2"; then
    echo "  (Note: '$REF2' matches the clean working directory, using live path for performance)"
    USE_LIVE_DIR_2=true
fi

if [[ "$USE_LIVE_DIR_2" == "true" ]]; then
    COMPARE_PATH2="$REPO_PATH"
    echo "  2: $REF2 (using live directory: $COMPARE_PATH2)"
else
    LABEL2=$(get_label "$REPO_PATH" "$REF2")
    COMPARE_PATH2="${PARENT_TEMP_DIR}/${LABEL2}"
    echo "  2: $REF2 (creating snapshot...)"
    populate_dir_from_ref "$REPO_PATH" "$REF2" "$COMPARE_PATH2"
fi

# --- 执行比较 ---
# 检查最终的比较路径是否相同，避免无意义的自身比较
if [[ "$COMPARE_PATH1" == "$COMPARE_PATH2" ]]; then
    echo "================================================="
    echo "Warning: Both references point to the same state. Nothing to compare." >&2
    exit 0
fi

echo "================================================="
echo
echo "Launching $DIFF_TOOL... (will clean up automatically after it closes)"
"$DIFF_TOOL" -wait "$COMPARE_PATH1" "$COMPARE_PATH2"

echo "$DIFF_TOOL closed."